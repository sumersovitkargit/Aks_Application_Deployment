name: CI/CD Pipeline for Azure Kubernetes Service

on:
  workflow_dispatch:
    inputs:
      environment-name:
        type: choice
        description: 'Environment'
        required: true
        options: ['dev', 'uat', 'prod']

jobs:
  # CI Job: Build and Push Docker Image to ACR
  ci:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Ensure Docker Daemon is Running
      - name: Start Docker Service
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo systemctl status docker

      # Set up QEMU & Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Install Azure CLI (Fix for 'az: command not found')
      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg

          # Remove any existing Azure CLI
          sudo apt-get remove -y azure-cli || true

          # Download and install Azure CLI
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install -y azure-cli

           az version
          
      # Log in to Azure ACR using Service Principal
      - name: Log in to Azure ACR
        run: |
          az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }} \
            --username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:${{ github.sha }} .
          docker tag ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:${{ github.sha }} ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:latest
          docker push ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:${{ github.sha }}
          docker push ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:latest

  # CD Job: Deploy to AKS
  deploy:
    runs-on: self-hosted
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Azure CLI (Fix for 'az: command not found')
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version

      # Azure login using Service Principal
      - name: Azure Login
        run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      # Set up Kubernetes context for AKS
      - name: Set up Kubernetes context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --overwrite-existing

      # Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        run: |
          az acr login \
            --name ${{ secrets.AZURE_REGISTRY_NAME }} \
            --username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}
            
      - name: Install kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo tee /etc/apt/keyrings/kubernetes-apt-keyring.asc
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl
          kubectl version --client
          
      # Deploy the new Docker image to AKS
      - name: Deploy to AKS
        run: |
          kubectl apply -f kubernetes/deploy.yml -n ns-${{ github.event.inputs.environment-name }}
          kubectl rollout status deployment/my-app -n ns-${{ github.event.inputs.environment-name }}

      # Logout from Azure CLI
      - name: Logout from Azure CLI
        run: az logout
