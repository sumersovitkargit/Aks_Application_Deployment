name: CI/CD Pipeline for Azure Kubernetes Service

#on:
#  push:
#    branches:
#      - main  # Trigger CI/CD on push to main branch

on:
  workflow_dispatch:
    inputs:
      environment-name:
        type: environment
        description: 'Environment'
        required: true
        options: ['dev','uat','prod']

jobs:
  # CI Job: Build and Push Docker Image to ACR
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up QEMU & Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Azure ACR using Service Principal
      - name: Log in to Azure ACR
        run: |
          az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }} \
            --username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:${{ github.sha }} .
          docker tag ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:${{ github.sha }} ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:latest
          docker push ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:${{ github.sha }}
          docker push ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/my-app:latest
 
 # CD Job: Deploy to AKS
  deploy:
    runs-on: ubuntu-latest
    needs: ci
    steps:
    # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

    # Install Azure CLI (Fix for missing 'setup-azurecli' issue)
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version

      # Azure login using Service Principal
      - name: Azure Login
        run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

    # Set up Kubernetes context for AKS
      - name: Set up Kubernetes context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --overwrite-existing

    # Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        run: |
          az acr login \
            --name ${{ secrets.AZURE_REGISTRY_NAME }} \
            --username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --password ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    # Deploy the new Docker image to AKS
      - name: Deploy to AKS
        run: |
          kubectl apply -f kubernetes/deploy.yml -n ns-${{input.Enviromet}}
          kubectl rollout status deployment/my-app -n ns-${{input.Enviromet}}

    # Logout from Azure CLI
      - name: Logout from Azure CLI
        run: az logout

